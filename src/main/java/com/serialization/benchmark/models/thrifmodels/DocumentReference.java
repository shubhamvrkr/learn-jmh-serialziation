package com.serialization.benchmark.models.thrifmodels;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-30")
public class DocumentReference implements org.apache.thrift.TBase<DocumentReference, DocumentReference._Fields>, java.io.Serializable, Cloneable, Comparable<DocumentReference> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DocumentReference");

  private static final org.apache.thrift.protocol.TField DOC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("docId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField DOC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("docName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DOC_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("docHash", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DOC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("docType", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DocumentReferenceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DocumentReferenceTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String docId; // required
  public double version; // required
  public @org.apache.thrift.annotation.Nullable String docName; // required
  public @org.apache.thrift.annotation.Nullable String docHash; // required
  public @org.apache.thrift.annotation.Nullable String docType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DOC_ID((short)1, "docId"),
    VERSION((short)2, "version"),
    DOC_NAME((short)3, "docName"),
    DOC_HASH((short)4, "docHash"),
    DOC_TYPE((short)5, "docType");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOC_ID
          return DOC_ID;
        case 2: // VERSION
          return VERSION;
        case 3: // DOC_NAME
          return DOC_NAME;
        case 4: // DOC_HASH
          return DOC_HASH;
        case 5: // DOC_TYPE
          return DOC_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOC_ID, new org.apache.thrift.meta_data.FieldMetaData("docId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DOC_NAME, new org.apache.thrift.meta_data.FieldMetaData("docName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOC_HASH, new org.apache.thrift.meta_data.FieldMetaData("docHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("docType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DocumentReference.class, metaDataMap);
  }

  public DocumentReference() {
  }

  public DocumentReference(
    String docId,
    double version,
    String docName,
    String docHash,
    String docType)
  {
    this();
    this.docId = docId;
    this.version = version;
    setVersionIsSet(true);
    this.docName = docName;
    this.docHash = docHash;
    this.docType = docType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DocumentReference(DocumentReference other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDocId()) {
      this.docId = other.docId;
    }
    this.version = other.version;
    if (other.isSetDocName()) {
      this.docName = other.docName;
    }
    if (other.isSetDocHash()) {
      this.docHash = other.docHash;
    }
    if (other.isSetDocType()) {
      this.docType = other.docType;
    }
  }

  public DocumentReference deepCopy() {
    return new DocumentReference(this);
  }

  @Override
  public void clear() {
    this.docId = null;
    setVersionIsSet(false);
    this.version = 0.0;
    this.docName = null;
    this.docHash = null;
    this.docType = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getDocId() {
    return this.docId;
  }

  public DocumentReference setDocId(@org.apache.thrift.annotation.Nullable String docId) {
    this.docId = docId;
    return this;
  }

  public void unsetDocId() {
    this.docId = null;
  }

  /** Returns true if field docId is set (has been assigned a value) and false otherwise */
  public boolean isSetDocId() {
    return this.docId != null;
  }

  public void setDocIdIsSet(boolean value) {
    if (!value) {
      this.docId = null;
    }
  }

  public double getVersion() {
    return this.version;
  }

  public DocumentReference setVersion(double version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getDocName() {
    return this.docName;
  }

  public DocumentReference setDocName(@org.apache.thrift.annotation.Nullable String docName) {
    this.docName = docName;
    return this;
  }

  public void unsetDocName() {
    this.docName = null;
  }

  /** Returns true if field docName is set (has been assigned a value) and false otherwise */
  public boolean isSetDocName() {
    return this.docName != null;
  }

  public void setDocNameIsSet(boolean value) {
    if (!value) {
      this.docName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getDocHash() {
    return this.docHash;
  }

  public DocumentReference setDocHash(@org.apache.thrift.annotation.Nullable String docHash) {
    this.docHash = docHash;
    return this;
  }

  public void unsetDocHash() {
    this.docHash = null;
  }

  /** Returns true if field docHash is set (has been assigned a value) and false otherwise */
  public boolean isSetDocHash() {
    return this.docHash != null;
  }

  public void setDocHashIsSet(boolean value) {
    if (!value) {
      this.docHash = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getDocType() {
    return this.docType;
  }

  public DocumentReference setDocType(@org.apache.thrift.annotation.Nullable String docType) {
    this.docType = docType;
    return this;
  }

  public void unsetDocType() {
    this.docType = null;
  }

  /** Returns true if field docType is set (has been assigned a value) and false otherwise */
  public boolean isSetDocType() {
    return this.docType != null;
  }

  public void setDocTypeIsSet(boolean value) {
    if (!value) {
      this.docType = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case DOC_ID:
      if (value == null) {
        unsetDocId();
      } else {
        setDocId((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Double)value);
      }
      break;

    case DOC_NAME:
      if (value == null) {
        unsetDocName();
      } else {
        setDocName((String)value);
      }
      break;

    case DOC_HASH:
      if (value == null) {
        unsetDocHash();
      } else {
        setDocHash((String)value);
      }
      break;

    case DOC_TYPE:
      if (value == null) {
        unsetDocType();
      } else {
        setDocType((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DOC_ID:
      return getDocId();

    case VERSION:
      return getVersion();

    case DOC_NAME:
      return getDocName();

    case DOC_HASH:
      return getDocHash();

    case DOC_TYPE:
      return getDocType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DOC_ID:
      return isSetDocId();
    case VERSION:
      return isSetVersion();
    case DOC_NAME:
      return isSetDocName();
    case DOC_HASH:
      return isSetDocHash();
    case DOC_TYPE:
      return isSetDocType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DocumentReference)
      return this.equals((DocumentReference)that);
    return false;
  }

  public boolean equals(DocumentReference that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_docId = true && this.isSetDocId();
    boolean that_present_docId = true && that.isSetDocId();
    if (this_present_docId || that_present_docId) {
      if (!(this_present_docId && that_present_docId))
        return false;
      if (!this.docId.equals(that.docId))
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_docName = true && this.isSetDocName();
    boolean that_present_docName = true && that.isSetDocName();
    if (this_present_docName || that_present_docName) {
      if (!(this_present_docName && that_present_docName))
        return false;
      if (!this.docName.equals(that.docName))
        return false;
    }

    boolean this_present_docHash = true && this.isSetDocHash();
    boolean that_present_docHash = true && that.isSetDocHash();
    if (this_present_docHash || that_present_docHash) {
      if (!(this_present_docHash && that_present_docHash))
        return false;
      if (!this.docHash.equals(that.docHash))
        return false;
    }

    boolean this_present_docType = true && this.isSetDocType();
    boolean that_present_docType = true && that.isSetDocType();
    if (this_present_docType || that_present_docType) {
      if (!(this_present_docType && that_present_docType))
        return false;
      if (!this.docType.equals(that.docType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDocId()) ? 131071 : 524287);
    if (isSetDocId())
      hashCode = hashCode * 8191 + docId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + ((isSetDocName()) ? 131071 : 524287);
    if (isSetDocName())
      hashCode = hashCode * 8191 + docName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDocHash()) ? 131071 : 524287);
    if (isSetDocHash())
      hashCode = hashCode * 8191 + docHash.hashCode();

    hashCode = hashCode * 8191 + ((isSetDocType()) ? 131071 : 524287);
    if (isSetDocType())
      hashCode = hashCode * 8191 + docType.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DocumentReference other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDocId()).compareTo(other.isSetDocId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docId, other.docId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocName()).compareTo(other.isSetDocName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docName, other.docName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocHash()).compareTo(other.isSetDocHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docHash, other.docHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocType()).compareTo(other.isSetDocType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docType, other.docType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DocumentReference(");
    boolean first = true;

    sb.append("docId:");
    if (this.docId == null) {
      sb.append("null");
    } else {
      sb.append(this.docId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("docName:");
    if (this.docName == null) {
      sb.append("null");
    } else {
      sb.append(this.docName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("docHash:");
    if (this.docHash == null) {
      sb.append("null");
    } else {
      sb.append(this.docHash);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("docType:");
    if (this.docType == null) {
      sb.append("null");
    } else {
      sb.append(this.docType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (docId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'docId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DocumentReferenceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DocumentReferenceStandardScheme getScheme() {
      return new DocumentReferenceStandardScheme();
    }
  }

  private static class DocumentReferenceStandardScheme extends org.apache.thrift.scheme.StandardScheme<DocumentReference> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DocumentReference struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.docId = iprot.readString();
              struct.setDocIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.version = iprot.readDouble();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.docName = iprot.readString();
              struct.setDocNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOC_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.docHash = iprot.readString();
              struct.setDocHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.docType = iprot.readString();
              struct.setDocTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DocumentReference struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.docId != null) {
        oprot.writeFieldBegin(DOC_ID_FIELD_DESC);
        oprot.writeString(struct.docId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeDouble(struct.version);
      oprot.writeFieldEnd();
      if (struct.docName != null) {
        oprot.writeFieldBegin(DOC_NAME_FIELD_DESC);
        oprot.writeString(struct.docName);
        oprot.writeFieldEnd();
      }
      if (struct.docHash != null) {
        oprot.writeFieldBegin(DOC_HASH_FIELD_DESC);
        oprot.writeString(struct.docHash);
        oprot.writeFieldEnd();
      }
      if (struct.docType != null) {
        oprot.writeFieldBegin(DOC_TYPE_FIELD_DESC);
        oprot.writeString(struct.docType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DocumentReferenceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DocumentReferenceTupleScheme getScheme() {
      return new DocumentReferenceTupleScheme();
    }
  }

  private static class DocumentReferenceTupleScheme extends org.apache.thrift.scheme.TupleScheme<DocumentReference> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DocumentReference struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.docId);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetDocName()) {
        optionals.set(1);
      }
      if (struct.isSetDocHash()) {
        optionals.set(2);
      }
      if (struct.isSetDocType()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetVersion()) {
        oprot.writeDouble(struct.version);
      }
      if (struct.isSetDocName()) {
        oprot.writeString(struct.docName);
      }
      if (struct.isSetDocHash()) {
        oprot.writeString(struct.docHash);
      }
      if (struct.isSetDocType()) {
        oprot.writeString(struct.docType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DocumentReference struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.docId = iprot.readString();
      struct.setDocIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.version = iprot.readDouble();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.docName = iprot.readString();
        struct.setDocNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.docHash = iprot.readString();
        struct.setDocHashIsSet(true);
      }
      if (incoming.get(3)) {
        struct.docType = iprot.readString();
        struct.setDocTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

