package com.serialization.benchmark.models.thrifmodels;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-30")
public class LineItem implements org.apache.thrift.TBase<LineItem, LineItem._Fields>, java.io.Serializable, Cloneable, Comparable<LineItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LineItem");

  private static final org.apache.thrift.protocol.TField PO_LINE_SEQ_NBR_FIELD_DESC = new org.apache.thrift.protocol.TField("poLineSeqNBR", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STYLE_CD_FIELD_DESC = new org.apache.thrift.protocol.TField("styleCD", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUB_STYLE_CD_FIELD_DESC = new org.apache.thrift.protocol.TField("subStyleCD", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SKU_FIELD_DESC = new org.apache.thrift.protocol.TField("sku", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField UNIT_OF_MEASUREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("unitOfMeasurement", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("volume", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField VOLUME_UOM_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeUOM", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField WEIGHT_UOM_FIELD_DESC = new org.apache.thrift.protocol.TField("weightUOM", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DUE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("dueDate", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LineItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LineItemTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String poLineSeqNBR; // required
  public @org.apache.thrift.annotation.Nullable String styleCD; // required
  public @org.apache.thrift.annotation.Nullable String subStyleCD; // required
  public @org.apache.thrift.annotation.Nullable String sku; // required
  public @org.apache.thrift.annotation.Nullable String description; // required
  public int quantity; // required
  public @org.apache.thrift.annotation.Nullable String unitOfMeasurement; // required
  public double price; // required
  public double volume; // required
  public @org.apache.thrift.annotation.Nullable String volumeUOM; // required
  public double weight; // required
  public @org.apache.thrift.annotation.Nullable String weightUOM; // required
  public long dueDate; // required
  public @org.apache.thrift.annotation.Nullable String status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PO_LINE_SEQ_NBR((short)1, "poLineSeqNBR"),
    STYLE_CD((short)2, "styleCD"),
    SUB_STYLE_CD((short)3, "subStyleCD"),
    SKU((short)4, "sku"),
    DESCRIPTION((short)5, "description"),
    QUANTITY((short)6, "quantity"),
    UNIT_OF_MEASUREMENT((short)7, "unitOfMeasurement"),
    PRICE((short)8, "price"),
    VOLUME((short)9, "volume"),
    VOLUME_UOM((short)10, "volumeUOM"),
    WEIGHT((short)11, "weight"),
    WEIGHT_UOM((short)12, "weightUOM"),
    DUE_DATE((short)13, "dueDate"),
    STATUS((short)14, "status");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PO_LINE_SEQ_NBR
          return PO_LINE_SEQ_NBR;
        case 2: // STYLE_CD
          return STYLE_CD;
        case 3: // SUB_STYLE_CD
          return SUB_STYLE_CD;
        case 4: // SKU
          return SKU;
        case 5: // DESCRIPTION
          return DESCRIPTION;
        case 6: // QUANTITY
          return QUANTITY;
        case 7: // UNIT_OF_MEASUREMENT
          return UNIT_OF_MEASUREMENT;
        case 8: // PRICE
          return PRICE;
        case 9: // VOLUME
          return VOLUME;
        case 10: // VOLUME_UOM
          return VOLUME_UOM;
        case 11: // WEIGHT
          return WEIGHT;
        case 12: // WEIGHT_UOM
          return WEIGHT_UOM;
        case 13: // DUE_DATE
          return DUE_DATE;
        case 14: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUANTITY_ISSET_ID = 0;
  private static final int __PRICE_ISSET_ID = 1;
  private static final int __VOLUME_ISSET_ID = 2;
  private static final int __WEIGHT_ISSET_ID = 3;
  private static final int __DUEDATE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PO_LINE_SEQ_NBR, new org.apache.thrift.meta_data.FieldMetaData("poLineSeqNBR", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STYLE_CD, new org.apache.thrift.meta_data.FieldMetaData("styleCD", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_STYLE_CD, new org.apache.thrift.meta_data.FieldMetaData("subStyleCD", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SKU, new org.apache.thrift.meta_data.FieldMetaData("sku", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNIT_OF_MEASUREMENT, new org.apache.thrift.meta_data.FieldMetaData("unitOfMeasurement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VOLUME, new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VOLUME_UOM, new org.apache.thrift.meta_data.FieldMetaData("volumeUOM", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WEIGHT_UOM, new org.apache.thrift.meta_data.FieldMetaData("weightUOM", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DUE_DATE, new org.apache.thrift.meta_data.FieldMetaData("dueDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LineItem.class, metaDataMap);
  }

  public LineItem() {
  }

  public LineItem(
    String poLineSeqNBR,
    String styleCD,
    String subStyleCD,
    String sku,
    String description,
    int quantity,
    String unitOfMeasurement,
    double price,
    double volume,
    String volumeUOM,
    double weight,
    String weightUOM,
    long dueDate,
    String status)
  {
    this();
    this.poLineSeqNBR = poLineSeqNBR;
    this.styleCD = styleCD;
    this.subStyleCD = subStyleCD;
    this.sku = sku;
    this.description = description;
    this.quantity = quantity;
    setQuantityIsSet(true);
    this.unitOfMeasurement = unitOfMeasurement;
    this.price = price;
    setPriceIsSet(true);
    this.volume = volume;
    setVolumeIsSet(true);
    this.volumeUOM = volumeUOM;
    this.weight = weight;
    setWeightIsSet(true);
    this.weightUOM = weightUOM;
    this.dueDate = dueDate;
    setDueDateIsSet(true);
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LineItem(LineItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPoLineSeqNBR()) {
      this.poLineSeqNBR = other.poLineSeqNBR;
    }
    if (other.isSetStyleCD()) {
      this.styleCD = other.styleCD;
    }
    if (other.isSetSubStyleCD()) {
      this.subStyleCD = other.subStyleCD;
    }
    if (other.isSetSku()) {
      this.sku = other.sku;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.quantity = other.quantity;
    if (other.isSetUnitOfMeasurement()) {
      this.unitOfMeasurement = other.unitOfMeasurement;
    }
    this.price = other.price;
    this.volume = other.volume;
    if (other.isSetVolumeUOM()) {
      this.volumeUOM = other.volumeUOM;
    }
    this.weight = other.weight;
    if (other.isSetWeightUOM()) {
      this.weightUOM = other.weightUOM;
    }
    this.dueDate = other.dueDate;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
  }

  public LineItem deepCopy() {
    return new LineItem(this);
  }

  @Override
  public void clear() {
    this.poLineSeqNBR = null;
    this.styleCD = null;
    this.subStyleCD = null;
    this.sku = null;
    this.description = null;
    setQuantityIsSet(false);
    this.quantity = 0;
    this.unitOfMeasurement = null;
    setPriceIsSet(false);
    this.price = 0.0;
    setVolumeIsSet(false);
    this.volume = 0.0;
    this.volumeUOM = null;
    setWeightIsSet(false);
    this.weight = 0.0;
    this.weightUOM = null;
    setDueDateIsSet(false);
    this.dueDate = 0;
    this.status = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getPoLineSeqNBR() {
    return this.poLineSeqNBR;
  }

  public LineItem setPoLineSeqNBR(@org.apache.thrift.annotation.Nullable String poLineSeqNBR) {
    this.poLineSeqNBR = poLineSeqNBR;
    return this;
  }

  public void unsetPoLineSeqNBR() {
    this.poLineSeqNBR = null;
  }

  /** Returns true if field poLineSeqNBR is set (has been assigned a value) and false otherwise */
  public boolean isSetPoLineSeqNBR() {
    return this.poLineSeqNBR != null;
  }

  public void setPoLineSeqNBRIsSet(boolean value) {
    if (!value) {
      this.poLineSeqNBR = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getStyleCD() {
    return this.styleCD;
  }

  public LineItem setStyleCD(@org.apache.thrift.annotation.Nullable String styleCD) {
    this.styleCD = styleCD;
    return this;
  }

  public void unsetStyleCD() {
    this.styleCD = null;
  }

  /** Returns true if field styleCD is set (has been assigned a value) and false otherwise */
  public boolean isSetStyleCD() {
    return this.styleCD != null;
  }

  public void setStyleCDIsSet(boolean value) {
    if (!value) {
      this.styleCD = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getSubStyleCD() {
    return this.subStyleCD;
  }

  public LineItem setSubStyleCD(@org.apache.thrift.annotation.Nullable String subStyleCD) {
    this.subStyleCD = subStyleCD;
    return this;
  }

  public void unsetSubStyleCD() {
    this.subStyleCD = null;
  }

  /** Returns true if field subStyleCD is set (has been assigned a value) and false otherwise */
  public boolean isSetSubStyleCD() {
    return this.subStyleCD != null;
  }

  public void setSubStyleCDIsSet(boolean value) {
    if (!value) {
      this.subStyleCD = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getSku() {
    return this.sku;
  }

  public LineItem setSku(@org.apache.thrift.annotation.Nullable String sku) {
    this.sku = sku;
    return this;
  }

  public void unsetSku() {
    this.sku = null;
  }

  /** Returns true if field sku is set (has been assigned a value) and false otherwise */
  public boolean isSetSku() {
    return this.sku != null;
  }

  public void setSkuIsSet(boolean value) {
    if (!value) {
      this.sku = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getDescription() {
    return this.description;
  }

  public LineItem setDescription(@org.apache.thrift.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getQuantity() {
    return this.quantity;
  }

  public LineItem setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getUnitOfMeasurement() {
    return this.unitOfMeasurement;
  }

  public LineItem setUnitOfMeasurement(@org.apache.thrift.annotation.Nullable String unitOfMeasurement) {
    this.unitOfMeasurement = unitOfMeasurement;
    return this;
  }

  public void unsetUnitOfMeasurement() {
    this.unitOfMeasurement = null;
  }

  /** Returns true if field unitOfMeasurement is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitOfMeasurement() {
    return this.unitOfMeasurement != null;
  }

  public void setUnitOfMeasurementIsSet(boolean value) {
    if (!value) {
      this.unitOfMeasurement = null;
    }
  }

  public double getPrice() {
    return this.price;
  }

  public LineItem setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public double getVolume() {
    return this.volume;
  }

  public LineItem setVolume(double volume) {
    this.volume = volume;
    setVolumeIsSet(true);
    return this;
  }

  public void unsetVolume() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  /** Returns true if field volume is set (has been assigned a value) and false otherwise */
  public boolean isSetVolume() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  public void setVolumeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getVolumeUOM() {
    return this.volumeUOM;
  }

  public LineItem setVolumeUOM(@org.apache.thrift.annotation.Nullable String volumeUOM) {
    this.volumeUOM = volumeUOM;
    return this;
  }

  public void unsetVolumeUOM() {
    this.volumeUOM = null;
  }

  /** Returns true if field volumeUOM is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeUOM() {
    return this.volumeUOM != null;
  }

  public void setVolumeUOMIsSet(boolean value) {
    if (!value) {
      this.volumeUOM = null;
    }
  }

  public double getWeight() {
    return this.weight;
  }

  public LineItem setWeight(double weight) {
    this.weight = weight;
    setWeightIsSet(true);
    return this;
  }

  public void unsetWeight() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  /** Returns true if field weight is set (has been assigned a value) and false otherwise */
  public boolean isSetWeight() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  public void setWeightIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getWeightUOM() {
    return this.weightUOM;
  }

  public LineItem setWeightUOM(@org.apache.thrift.annotation.Nullable String weightUOM) {
    this.weightUOM = weightUOM;
    return this;
  }

  public void unsetWeightUOM() {
    this.weightUOM = null;
  }

  /** Returns true if field weightUOM is set (has been assigned a value) and false otherwise */
  public boolean isSetWeightUOM() {
    return this.weightUOM != null;
  }

  public void setWeightUOMIsSet(boolean value) {
    if (!value) {
      this.weightUOM = null;
    }
  }

  public long getDueDate() {
    return this.dueDate;
  }

  public LineItem setDueDate(long dueDate) {
    this.dueDate = dueDate;
    setDueDateIsSet(true);
    return this;
  }

  public void unsetDueDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DUEDATE_ISSET_ID);
  }

  /** Returns true if field dueDate is set (has been assigned a value) and false otherwise */
  public boolean isSetDueDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DUEDATE_ISSET_ID);
  }

  public void setDueDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DUEDATE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getStatus() {
    return this.status;
  }

  public LineItem setStatus(@org.apache.thrift.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case PO_LINE_SEQ_NBR:
      if (value == null) {
        unsetPoLineSeqNBR();
      } else {
        setPoLineSeqNBR((String)value);
      }
      break;

    case STYLE_CD:
      if (value == null) {
        unsetStyleCD();
      } else {
        setStyleCD((String)value);
      }
      break;

    case SUB_STYLE_CD:
      if (value == null) {
        unsetSubStyleCD();
      } else {
        setSubStyleCD((String)value);
      }
      break;

    case SKU:
      if (value == null) {
        unsetSku();
      } else {
        setSku((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case UNIT_OF_MEASUREMENT:
      if (value == null) {
        unsetUnitOfMeasurement();
      } else {
        setUnitOfMeasurement((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case VOLUME:
      if (value == null) {
        unsetVolume();
      } else {
        setVolume((Double)value);
      }
      break;

    case VOLUME_UOM:
      if (value == null) {
        unsetVolumeUOM();
      } else {
        setVolumeUOM((String)value);
      }
      break;

    case WEIGHT:
      if (value == null) {
        unsetWeight();
      } else {
        setWeight((Double)value);
      }
      break;

    case WEIGHT_UOM:
      if (value == null) {
        unsetWeightUOM();
      } else {
        setWeightUOM((String)value);
      }
      break;

    case DUE_DATE:
      if (value == null) {
        unsetDueDate();
      } else {
        setDueDate((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PO_LINE_SEQ_NBR:
      return getPoLineSeqNBR();

    case STYLE_CD:
      return getStyleCD();

    case SUB_STYLE_CD:
      return getSubStyleCD();

    case SKU:
      return getSku();

    case DESCRIPTION:
      return getDescription();

    case QUANTITY:
      return getQuantity();

    case UNIT_OF_MEASUREMENT:
      return getUnitOfMeasurement();

    case PRICE:
      return getPrice();

    case VOLUME:
      return getVolume();

    case VOLUME_UOM:
      return getVolumeUOM();

    case WEIGHT:
      return getWeight();

    case WEIGHT_UOM:
      return getWeightUOM();

    case DUE_DATE:
      return getDueDate();

    case STATUS:
      return getStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PO_LINE_SEQ_NBR:
      return isSetPoLineSeqNBR();
    case STYLE_CD:
      return isSetStyleCD();
    case SUB_STYLE_CD:
      return isSetSubStyleCD();
    case SKU:
      return isSetSku();
    case DESCRIPTION:
      return isSetDescription();
    case QUANTITY:
      return isSetQuantity();
    case UNIT_OF_MEASUREMENT:
      return isSetUnitOfMeasurement();
    case PRICE:
      return isSetPrice();
    case VOLUME:
      return isSetVolume();
    case VOLUME_UOM:
      return isSetVolumeUOM();
    case WEIGHT:
      return isSetWeight();
    case WEIGHT_UOM:
      return isSetWeightUOM();
    case DUE_DATE:
      return isSetDueDate();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LineItem)
      return this.equals((LineItem)that);
    return false;
  }

  public boolean equals(LineItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_poLineSeqNBR = true && this.isSetPoLineSeqNBR();
    boolean that_present_poLineSeqNBR = true && that.isSetPoLineSeqNBR();
    if (this_present_poLineSeqNBR || that_present_poLineSeqNBR) {
      if (!(this_present_poLineSeqNBR && that_present_poLineSeqNBR))
        return false;
      if (!this.poLineSeqNBR.equals(that.poLineSeqNBR))
        return false;
    }

    boolean this_present_styleCD = true && this.isSetStyleCD();
    boolean that_present_styleCD = true && that.isSetStyleCD();
    if (this_present_styleCD || that_present_styleCD) {
      if (!(this_present_styleCD && that_present_styleCD))
        return false;
      if (!this.styleCD.equals(that.styleCD))
        return false;
    }

    boolean this_present_subStyleCD = true && this.isSetSubStyleCD();
    boolean that_present_subStyleCD = true && that.isSetSubStyleCD();
    if (this_present_subStyleCD || that_present_subStyleCD) {
      if (!(this_present_subStyleCD && that_present_subStyleCD))
        return false;
      if (!this.subStyleCD.equals(that.subStyleCD))
        return false;
    }

    boolean this_present_sku = true && this.isSetSku();
    boolean that_present_sku = true && that.isSetSku();
    if (this_present_sku || that_present_sku) {
      if (!(this_present_sku && that_present_sku))
        return false;
      if (!this.sku.equals(that.sku))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_unitOfMeasurement = true && this.isSetUnitOfMeasurement();
    boolean that_present_unitOfMeasurement = true && that.isSetUnitOfMeasurement();
    if (this_present_unitOfMeasurement || that_present_unitOfMeasurement) {
      if (!(this_present_unitOfMeasurement && that_present_unitOfMeasurement))
        return false;
      if (!this.unitOfMeasurement.equals(that.unitOfMeasurement))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_volume = true;
    boolean that_present_volume = true;
    if (this_present_volume || that_present_volume) {
      if (!(this_present_volume && that_present_volume))
        return false;
      if (this.volume != that.volume)
        return false;
    }

    boolean this_present_volumeUOM = true && this.isSetVolumeUOM();
    boolean that_present_volumeUOM = true && that.isSetVolumeUOM();
    if (this_present_volumeUOM || that_present_volumeUOM) {
      if (!(this_present_volumeUOM && that_present_volumeUOM))
        return false;
      if (!this.volumeUOM.equals(that.volumeUOM))
        return false;
    }

    boolean this_present_weight = true;
    boolean that_present_weight = true;
    if (this_present_weight || that_present_weight) {
      if (!(this_present_weight && that_present_weight))
        return false;
      if (this.weight != that.weight)
        return false;
    }

    boolean this_present_weightUOM = true && this.isSetWeightUOM();
    boolean that_present_weightUOM = true && that.isSetWeightUOM();
    if (this_present_weightUOM || that_present_weightUOM) {
      if (!(this_present_weightUOM && that_present_weightUOM))
        return false;
      if (!this.weightUOM.equals(that.weightUOM))
        return false;
    }

    boolean this_present_dueDate = true;
    boolean that_present_dueDate = true;
    if (this_present_dueDate || that_present_dueDate) {
      if (!(this_present_dueDate && that_present_dueDate))
        return false;
      if (this.dueDate != that.dueDate)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPoLineSeqNBR()) ? 131071 : 524287);
    if (isSetPoLineSeqNBR())
      hashCode = hashCode * 8191 + poLineSeqNBR.hashCode();

    hashCode = hashCode * 8191 + ((isSetStyleCD()) ? 131071 : 524287);
    if (isSetStyleCD())
      hashCode = hashCode * 8191 + styleCD.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubStyleCD()) ? 131071 : 524287);
    if (isSetSubStyleCD())
      hashCode = hashCode * 8191 + subStyleCD.hashCode();

    hashCode = hashCode * 8191 + ((isSetSku()) ? 131071 : 524287);
    if (isSetSku())
      hashCode = hashCode * 8191 + sku.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + quantity;

    hashCode = hashCode * 8191 + ((isSetUnitOfMeasurement()) ? 131071 : 524287);
    if (isSetUnitOfMeasurement())
      hashCode = hashCode * 8191 + unitOfMeasurement.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(price);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(volume);

    hashCode = hashCode * 8191 + ((isSetVolumeUOM()) ? 131071 : 524287);
    if (isSetVolumeUOM())
      hashCode = hashCode * 8191 + volumeUOM.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(weight);

    hashCode = hashCode * 8191 + ((isSetWeightUOM()) ? 131071 : 524287);
    if (isSetWeightUOM())
      hashCode = hashCode * 8191 + weightUOM.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dueDate);

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LineItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPoLineSeqNBR()).compareTo(other.isSetPoLineSeqNBR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoLineSeqNBR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poLineSeqNBR, other.poLineSeqNBR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStyleCD()).compareTo(other.isSetStyleCD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStyleCD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.styleCD, other.styleCD);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubStyleCD()).compareTo(other.isSetSubStyleCD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubStyleCD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subStyleCD, other.subStyleCD);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSku()).compareTo(other.isSetSku());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSku()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sku, other.sku);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitOfMeasurement()).compareTo(other.isSetUnitOfMeasurement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitOfMeasurement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitOfMeasurement, other.unitOfMeasurement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolume()).compareTo(other.isSetVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeUOM()).compareTo(other.isSetVolumeUOM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeUOM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeUOM, other.volumeUOM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeightUOM()).compareTo(other.isSetWeightUOM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeightUOM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weightUOM, other.weightUOM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDueDate()).compareTo(other.isSetDueDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDueDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dueDate, other.dueDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LineItem(");
    boolean first = true;

    sb.append("poLineSeqNBR:");
    if (this.poLineSeqNBR == null) {
      sb.append("null");
    } else {
      sb.append(this.poLineSeqNBR);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("styleCD:");
    if (this.styleCD == null) {
      sb.append("null");
    } else {
      sb.append(this.styleCD);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subStyleCD:");
    if (this.subStyleCD == null) {
      sb.append("null");
    } else {
      sb.append(this.subStyleCD);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sku:");
    if (this.sku == null) {
      sb.append("null");
    } else {
      sb.append(this.sku);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitOfMeasurement:");
    if (this.unitOfMeasurement == null) {
      sb.append("null");
    } else {
      sb.append(this.unitOfMeasurement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("volume:");
    sb.append(this.volume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("volumeUOM:");
    if (this.volumeUOM == null) {
      sb.append("null");
    } else {
      sb.append(this.volumeUOM);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("weight:");
    sb.append(this.weight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("weightUOM:");
    if (this.weightUOM == null) {
      sb.append("null");
    } else {
      sb.append(this.weightUOM);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dueDate:");
    sb.append(this.dueDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LineItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LineItemStandardScheme getScheme() {
      return new LineItemStandardScheme();
    }
  }

  private static class LineItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<LineItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LineItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PO_LINE_SEQ_NBR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.poLineSeqNBR = iprot.readString();
              struct.setPoLineSeqNBRIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STYLE_CD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.styleCD = iprot.readString();
              struct.setStyleCDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUB_STYLE_CD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subStyleCD = iprot.readString();
              struct.setSubStyleCDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SKU
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sku = iprot.readString();
              struct.setSkuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UNIT_OF_MEASUREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitOfMeasurement = iprot.readString();
              struct.setUnitOfMeasurementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.volume = iprot.readDouble();
              struct.setVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VOLUME_UOM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.volumeUOM = iprot.readString();
              struct.setVolumeUOMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.weight = iprot.readDouble();
              struct.setWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // WEIGHT_UOM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.weightUOM = iprot.readString();
              struct.setWeightUOMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DUE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dueDate = iprot.readI64();
              struct.setDueDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LineItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.poLineSeqNBR != null) {
        oprot.writeFieldBegin(PO_LINE_SEQ_NBR_FIELD_DESC);
        oprot.writeString(struct.poLineSeqNBR);
        oprot.writeFieldEnd();
      }
      if (struct.styleCD != null) {
        oprot.writeFieldBegin(STYLE_CD_FIELD_DESC);
        oprot.writeString(struct.styleCD);
        oprot.writeFieldEnd();
      }
      if (struct.subStyleCD != null) {
        oprot.writeFieldBegin(SUB_STYLE_CD_FIELD_DESC);
        oprot.writeString(struct.subStyleCD);
        oprot.writeFieldEnd();
      }
      if (struct.sku != null) {
        oprot.writeFieldBegin(SKU_FIELD_DESC);
        oprot.writeString(struct.sku);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.quantity);
      oprot.writeFieldEnd();
      if (struct.unitOfMeasurement != null) {
        oprot.writeFieldBegin(UNIT_OF_MEASUREMENT_FIELD_DESC);
        oprot.writeString(struct.unitOfMeasurement);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeDouble(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.volume);
      oprot.writeFieldEnd();
      if (struct.volumeUOM != null) {
        oprot.writeFieldBegin(VOLUME_UOM_FIELD_DESC);
        oprot.writeString(struct.volumeUOM);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
      oprot.writeDouble(struct.weight);
      oprot.writeFieldEnd();
      if (struct.weightUOM != null) {
        oprot.writeFieldBegin(WEIGHT_UOM_FIELD_DESC);
        oprot.writeString(struct.weightUOM);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DUE_DATE_FIELD_DESC);
      oprot.writeI64(struct.dueDate);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LineItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LineItemTupleScheme getScheme() {
      return new LineItemTupleScheme();
    }
  }

  private static class LineItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<LineItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LineItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPoLineSeqNBR()) {
        optionals.set(0);
      }
      if (struct.isSetStyleCD()) {
        optionals.set(1);
      }
      if (struct.isSetSubStyleCD()) {
        optionals.set(2);
      }
      if (struct.isSetSku()) {
        optionals.set(3);
      }
      if (struct.isSetDescription()) {
        optionals.set(4);
      }
      if (struct.isSetQuantity()) {
        optionals.set(5);
      }
      if (struct.isSetUnitOfMeasurement()) {
        optionals.set(6);
      }
      if (struct.isSetPrice()) {
        optionals.set(7);
      }
      if (struct.isSetVolume()) {
        optionals.set(8);
      }
      if (struct.isSetVolumeUOM()) {
        optionals.set(9);
      }
      if (struct.isSetWeight()) {
        optionals.set(10);
      }
      if (struct.isSetWeightUOM()) {
        optionals.set(11);
      }
      if (struct.isSetDueDate()) {
        optionals.set(12);
      }
      if (struct.isSetStatus()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPoLineSeqNBR()) {
        oprot.writeString(struct.poLineSeqNBR);
      }
      if (struct.isSetStyleCD()) {
        oprot.writeString(struct.styleCD);
      }
      if (struct.isSetSubStyleCD()) {
        oprot.writeString(struct.subStyleCD);
      }
      if (struct.isSetSku()) {
        oprot.writeString(struct.sku);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetQuantity()) {
        oprot.writeI32(struct.quantity);
      }
      if (struct.isSetUnitOfMeasurement()) {
        oprot.writeString(struct.unitOfMeasurement);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetVolume()) {
        oprot.writeDouble(struct.volume);
      }
      if (struct.isSetVolumeUOM()) {
        oprot.writeString(struct.volumeUOM);
      }
      if (struct.isSetWeight()) {
        oprot.writeDouble(struct.weight);
      }
      if (struct.isSetWeightUOM()) {
        oprot.writeString(struct.weightUOM);
      }
      if (struct.isSetDueDate()) {
        oprot.writeI64(struct.dueDate);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LineItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.poLineSeqNBR = iprot.readString();
        struct.setPoLineSeqNBRIsSet(true);
      }
      if (incoming.get(1)) {
        struct.styleCD = iprot.readString();
        struct.setStyleCDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.subStyleCD = iprot.readString();
        struct.setSubStyleCDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sku = iprot.readString();
        struct.setSkuIsSet(true);
      }
      if (incoming.get(4)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.quantity = iprot.readI32();
        struct.setQuantityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.unitOfMeasurement = iprot.readString();
        struct.setUnitOfMeasurementIsSet(true);
      }
      if (incoming.get(7)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.volume = iprot.readDouble();
        struct.setVolumeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.volumeUOM = iprot.readString();
        struct.setVolumeUOMIsSet(true);
      }
      if (incoming.get(10)) {
        struct.weight = iprot.readDouble();
        struct.setWeightIsSet(true);
      }
      if (incoming.get(11)) {
        struct.weightUOM = iprot.readString();
        struct.setWeightUOMIsSet(true);
      }
      if (incoming.get(12)) {
        struct.dueDate = iprot.readI64();
        struct.setDueDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

